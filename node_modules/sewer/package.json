{
  "name": "sewer",
  "version": "0.1.1",
  "description": "Cross browser and device event handler with delegation, chaining and filtering engines",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/bredele/sewer.git"
  },
  "keywords": [
    "event",
    "delegation",
    "bubbling",
    "prevent",
    "filtering",
    "events"
  ],
  "author": {
    "name": "Olivier Wietrich",
    "email": "olivier.wietrich@gmail.com",
    "url": "http://github.com/bredele"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bredele/sewer/issues"
  },
  "dependencies": {
    "indexof": "0.0.1"
  },
  "readme": "# Sewer\n\n  Sewer will help you dealing with all the crap needed to handle dom events.\n\n  Sewer is cross browser and provides some cool features such as:\n   - cross browser target element\n   - automatic touch mapping\n   - delegation\n   - chaining\n   - filtering\n\n## Installation\n\nwith [component](http://component.io):\n\n    $ component install bredele/sewer\n\nwith [nodejs](http://nodejs.org/):\n\n    $ npm install sewer\n\nSewer is small and do one thing, listening dom events. It encourages composition and is already used in some\nprojects such as **[brick](http://github.com/bredele/brick)** or **[wall](http://github.com/bredele/wall)**. \n\n## Usage\n\n```js\nvar ev = require('sewer');\n\nev.bind(document.body, 'click', function(target, event) {\n  // do something\n});\n```\n\n  See [API](#api) for more details.\n\n### Delegation \n\n Delegate events with query selection. In the example above, the callback\n is executed only when a `button` with the className `clickable` is\n clicked.\n\n```js\nev.bind(document.body, 'click button.clickable', function() {\n  //do something only when buttons with the \n  //class clickable are clicked\n});\n```\n\n### Touch events\n\n  Touch events are automatically mapped with desktop/mouse events. It is great because\n  your implementation doesn't depend on the device and at the end you'll have one code that works everywhere.\n\n```js\nev.bind(el, 'click', function(target, event) {\n  // do something on touch end\n});\n```\n\n  In this example the callback is executed on `touchend` if you are on a mobile device\n  and on `click` otherwise.\n\n```\nclick => touchend\nmouseup => touchend\nmousedown => touchstart\nmousemove => touchmove\n```\n\n### Chaining\n\n  A code which depends on the event is hard to reuse or maintain. A good practice\n  is to dissociate the event manipulation from the real logic:\n\n```js\nev.bind(el, 'click', fn1, fn2);\n\nfunction fn1(target, e) {\n  e.preventDefault();\n  return target.innerHTML;\n}\n\nfunction fn2(str) {\n  //do something on target innerHTML\n}\n```\n\n### Filtering\n\n  Filter events with key code. In the example above, the callback is executed\n  only when `enter` is pressed.\n\n```js\nvar input = document.querySelector('input');\n\nev.bind(input, 'keypress > 13', function() {\n  //do something only on enter\n});\n```\n\n## API\n\n### .bind(el, str, callback, capture)\n\n  Add an event listener (alias `attach`).\n\n```js\nev.bind(document.body, 'click', function(target, ev) {\n  //do something\n});\n```\nThe first argument of the callback is the element (cross browser target) that trigerred the event.\n\n\n`bind` returns an array (topic, callback, capture) in case you want to remove the listener.\n\n\n### .unbind(el, topic, callback, capture)\n\n Remove an event listener (alias `detach`).\n\n```js\nev.unbind(document.body,'click', fn);\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Olivier Wietrich <olivier.wietrich@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/bredele/sewer",
  "_id": "sewer@0.1.1",
  "_from": "sewer@"
}
